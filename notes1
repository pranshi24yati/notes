from gurobipy import *
import numpy as np

# Parameters
a0 = [-0.3, -0.5, -1.0, -2.0, -3.0, -3.3, -3.5]  # elasticities in linear demand model
b0 = 300  # constants in the linear demand model 
sigma = 10. # the standard deviation of the noise
price_levels = [5, 8, 10, 12, 13, 16, 19] # predefined possible prices for each day
probabilities = [0.3, 0.3, 0.2, 0.05, 0.05, 0.05, 0.05]  # the probabilities of taking a price choice at a day
n_samples = 1000  # the number of sample we want to create
t = len(a0) # next number of days to optimize
n_level = len(price_levels)  # number of price options
Ld = 1e6

# Helper functions
def create_data_point(p, a, b, sigma):
    v = np.dot(p, a) + b + np.random.normal(loc=0.0, scale=sigma)
    return v

def create_dataset(a, b, N, price_levels, probabilities, sigma):
    t = len(a)
    prices = np.random.choice(price_levels, N + t - 1, p=probabilities)
    data_x = []
    data_y = []
    for i in range(N):
        p = prices[i:i+t]
        v = create_data_point(p, a, b, sigma)
        data_x.append(np.expand_dims(p, axis=0))
        data_y.append(v)
    data_x = np.concatenate(data_x, axis=0)
    return data_x, data_y

def get_demand(coeff, b, prices):
    assert len(coeff) == len(prices)
    d = b
    for i in range(len(coeff)):
        d += coeff[i] * prices[i]
    return d

def get_demands_rev(a, b, hist_p, p):
    all_p = hist_p + p
    t = len(a)
    d = [get_demand(
            coeff=a,
            b=b,
            prices=all_p[i+1:i+1+t]
        ) for i in range(t)]
    rev = np.dot(d, p)
    return d, rev

# Create the QUBO model
model = Model("option_pricing")

# Create binary decision variables for each price option for each day
x = {}
for i in range(t):
    for j in range(n_level):
        x[i,j] = model.addVar(vtype=GRB.BINARY, name=f"X_{i}_{j}")

# Add constraint that only one price can be selected for each day
for i in range(t):
    model.addConstr(quicksum(x[i,j] for j in range(n_level)) == 1, name=f"Day_{i}")

# Define the objective function
obj = QuadExpr()
for i in range(t):
    for j in range(n_level):
        for k in range(n_level):
            demand, _ = get_demands_rev(a0, b0, price_levels[:
